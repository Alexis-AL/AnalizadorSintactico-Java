
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 22 23:37:01 CDT 2022
//----------------------------------------------------

package codigo;

import java.io.File;
import java.io.FileWriter;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 22 23:37:01 CDT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\030\002\000\002\002" +
    "\003\000\002\003\003\000\002\003\004\000\002\004\003" +
    "\000\002\004\003\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\007\003\000\002\007\005\000\002" +
    "\007\003\000\002\005\010\000\002\005\010\000\002\005" +
    "\010\000\002\005\010\000\002\005\010\000\002\005\010" +
    "\000\002\010\003\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\011\003\000\002\011\006\000\002" +
    "\011\006\000\002\011\006\000\002\012\005\000\002\013" +
    "\003\000\002\013\004\000\002\014\003\000\002\014\003" +
    "\000\002\015\004\000\002\015\003\000\002\016\006\000" +
    "\002\016\010\000\002\016\007\000\002\016\005\000\002" +
    "\016\004\000\002\017\004\000\002\020\005\000\002\021" +
    "\003\000\002\021\003\000\002\022\003\000\002\022\004" +
    "\000\002\023\003\000\002\023\005\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\025\006\000\002\026\003\000\002\026" +
    "\003\000\002\027\005\000\002\027\004\000\002\027\004" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\012\002\000\005\011\006\010\007\007\001" +
    "\002\000\012\002\ufffb\005\ufffb\006\ufffb\007\ufffb\001\002" +
    "\000\004\002\ufffe\001\002\000\004\002\235\001\002\000" +
    "\006\004\224\034\223\001\002\000\006\004\211\034\212" +
    "\001\002\000\006\004\016\034\017\001\002\000\012\002" +
    "\000\005\011\006\010\007\007\001\002\000\004\002\uffff" +
    "\001\002\000\012\002\ufffc\005\ufffc\006\ufffc\007\ufffc\001" +
    "\002\000\004\002\ufffd\001\002\000\020\002\000\005\000" +
    "\006\000\007\000\017\141\022\142\024\205\001\002\000" +
    "\004\024\020\001\002\000\012\005\024\006\021\007\023" +
    "\025\000\001\002\000\004\004\203\001\002\000\004\025" +
    "\045\001\002\000\004\004\043\001\002\000\004\004\026" +
    "\001\002\000\004\025\uffee\001\002\000\006\017\027\025" +
    "\000\001\002\000\010\005\034\006\032\007\033\001\002" +
    "\000\004\025\uffea\001\002\000\004\025\uffec\001\002\000" +
    "\004\004\041\001\002\000\004\004\037\001\002\000\004" +
    "\004\035\001\002\000\006\017\027\025\000\001\002\000" +
    "\004\025\uffe8\001\002\000\006\017\027\025\000\001\002" +
    "\000\004\025\uffe9\001\002\000\006\017\027\025\000\001" +
    "\002\000\004\025\uffe7\001\002\000\006\017\027\025\000" +
    "\001\002\000\004\025\uffed\001\002\000\004\026\047\001" +
    "\002\000\012\002\ufff1\005\ufff1\006\ufff1\007\ufff1\001\002" +
    "\000\022\004\062\005\060\006\057\007\056\027\000\030" +
    "\051\031\053\032\052\001\002\000\022\004\062\005\060" +
    "\006\057\007\056\027\000\030\051\031\053\032\052\001" +
    "\002\000\004\024\171\001\002\000\022\004\076\005\074" +
    "\006\073\010\075\020\070\022\000\024\072\035\100\001" +
    "\002\000\004\024\154\001\002\000\004\027\uffe5\001\002" +
    "\000\004\022\153\001\002\000\004\004\151\001\002\000" +
    "\004\004\147\001\002\000\004\004\140\001\002\000\022" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\001\002\000\006\021\067\024\066\001\002" +
    "\000\004\027\065\001\002\000\022\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\001\002" +
    "\000\012\002\uffe6\005\uffe6\006\uffe6\007\uffe6\001\002\000" +
    "\022\004\076\005\074\006\073\010\075\020\070\024\072" +
    "\025\000\035\100\001\002\000\020\004\076\005\074\006" +
    "\073\010\075\020\070\024\072\035\100\001\002\000\020" +
    "\004\076\005\074\006\073\010\075\020\070\024\072\035" +
    "\100\001\002\000\030\010\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\017\uffd2\021\uffd2\022\uffd2\025" +
    "\uffd2\001\002\000\020\004\076\005\074\006\073\010\075" +
    "\020\070\024\072\035\100\001\002\000\030\010\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\021\uffcf\022\uffcf\025\uffcf\001\002\000\030\010\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\021\uffd0\022\uffd0\025\uffd0\001\002\000\020\004\076\005" +
    "\074\006\073\010\075\020\070\024\072\035\100\001\002" +
    "\000\032\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\021\uffd1\022\uffd1\024\066\025\uffd1" +
    "\001\002\000\030\010\110\011\111\012\105\013\103\014" +
    "\104\015\106\016\107\017\uffbf\021\112\022\uffbf\025\uffbf" +
    "\001\002\000\030\010\uffce\011\uffce\012\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\017\uffce\021\uffce\022\uffce\025\uffce" +
    "\001\002\000\004\022\102\001\002\000\024\004\uffdf\005" +
    "\uffdf\006\uffdf\007\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\001\002\000\020\004\076\005\074\006\073\010" +
    "\075\020\070\024\072\035\100\001\002\000\020\004\076" +
    "\005\074\006\073\010\075\020\070\024\072\035\100\001" +
    "\002\000\020\004\076\005\074\006\073\010\075\020\070" +
    "\024\072\035\100\001\002\000\020\004\076\005\074\006" +
    "\073\010\075\020\070\024\072\035\100\001\002\000\020" +
    "\004\076\005\074\006\073\010\075\020\070\024\072\035" +
    "\100\001\002\000\020\004\076\005\074\006\073\010\075" +
    "\020\070\024\072\035\100\001\002\000\020\004\076\005" +
    "\074\006\073\010\075\020\070\024\072\035\100\001\002" +
    "\000\020\004\076\005\074\006\073\010\075\020\070\024" +
    "\072\035\100\001\002\000\010\017\uffc2\022\uffc2\025\uffc2" +
    "\001\002\000\010\017\uffc7\022\uffc7\025\uffc7\001\002\000" +
    "\010\017\uffc6\022\uffc6\025\uffc6\001\002\000\010\017\uffc1" +
    "\022\uffc1\025\uffc1\001\002\000\010\017\uffc0\022\uffc0\025" +
    "\uffc0\001\002\000\010\017\uffc5\022\uffc5\025\uffc5\001\002" +
    "\000\010\017\uffc3\022\uffc3\025\uffc3\001\002\000\010\017" +
    "\uffc4\022\uffc4\025\uffc4\001\002\000\010\017\uffc9\022\uffc9" +
    "\025\uffc9\001\002\000\004\025\125\001\002\000\010\017" +
    "\uffca\022\uffca\025\uffca\001\002\000\010\017\uffc8\022\uffc8" +
    "\025\uffc8\001\002\000\004\025\uffd6\001\002\000\004\025" +
    "\137\001\002\000\006\017\132\025\000\001\002\000\020" +
    "\004\076\005\074\006\073\010\075\020\070\024\072\035" +
    "\100\001\002\000\004\025\uffd5\001\002\000\004\025\uffd4" +
    "\001\002\000\006\017\132\025\000\001\002\000\004\025" +
    "\uffd3\001\002\000\030\010\uffcd\011\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd\025" +
    "\uffcd\001\002\000\026\004\000\005\000\006\000\007\000" +
    "\017\141\022\142\027\000\030\000\031\000\032\000\001" +
    "\002\000\004\004\145\001\002\000\024\002\ufff5\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\027\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\001\002\000\024\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\001\002\000" +
    "\024\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\001\002\000\030\002\000\004" +
    "\000\005\000\006\000\007\000\017\141\022\142\027\000" +
    "\030\000\031\000\032\000\001\002\000\024\002\ufff6\004" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\001\002\000\026\004\000\005\000\006\000\007" +
    "\000\017\141\022\142\027\000\030\000\031\000\032\000" +
    "\001\002\000\024\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\001\002\000\026" +
    "\004\000\005\000\006\000\007\000\017\141\022\142\027" +
    "\000\030\000\031\000\032\000\001\002\000\024\002\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\032\ufffa\001\002\000\024\004\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\001" +
    "\002\000\020\004\076\005\074\006\073\010\075\020\070" +
    "\024\072\035\100\001\002\000\004\025\156\001\002\000" +
    "\004\026\157\001\002\000\012\004\062\030\051\031\053" +
    "\032\052\001\002\000\024\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\001\002" +
    "\000\014\004\062\027\uffe0\030\051\031\053\032\052\001" +
    "\002\000\004\027\163\001\002\000\024\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\001\002\000\004\027\uffe1\001\002\000\004\022\170" +
    "\001\002\000\004\022\uffd8\001\002\000\004\022\uffd7\001" +
    "\002\000\024\004\uffdc\005\uffdc\006\uffdc\007\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\001\002\000\020\004" +
    "\076\005\074\006\073\010\075\020\070\024\072\035\100" +
    "\001\002\000\004\025\173\001\002\000\014\004\062\026" +
    "\157\030\051\031\053\032\052\001\002\000\004\033\200" +
    "\001\002\000\024\004\uffcc\005\uffcc\006\uffcc\007\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\001\002\000\024" +
    "\004\uffcb\005\uffcb\006\uffcb\007\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\001\002\000\024\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\001\002\000\014\004\062\026\157\030\051\031\053" +
    "\032\052\001\002\000\024\004\uffda\005\uffda\006\uffda\007" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\001\002" +
    "\000\004\027\uffe4\001\002\000\006\017\027\025\000\001" +
    "\002\000\004\025\uffeb\001\002\000\012\005\024\006\021" +
    "\007\023\025\000\001\002\000\004\025\207\001\002\000" +
    "\004\026\047\001\002\000\012\002\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\001\002\000\020\002\000\005\000\006\000\007" +
    "\000\017\141\022\142\024\217\001\002\000\004\024\213" +
    "\001\002\000\012\005\024\006\021\007\023\025\000\001" +
    "\002\000\004\025\215\001\002\000\004\026\047\001\002" +
    "\000\012\002\uffef\005\uffef\006\uffef\007\uffef\001\002\000" +
    "\012\005\024\006\021\007\023\025\000\001\002\000\004" +
    "\025\221\001\002\000\004\026\047\001\002\000\012\002" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\001\002\000\004\024\231" +
    "\001\002\000\020\002\000\005\000\006\000\007\000\017" +
    "\141\022\142\024\225\001\002\000\012\005\024\006\021" +
    "\007\023\025\000\001\002\000\004\025\227\001\002\000" +
    "\004\026\047\001\002\000\012\002\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\001\002\000\012\005\024\006\021\007\023\025" +
    "\000\001\002\000\004\025\233\001\002\000\004\026\047" +
    "\001\002\000\012\002\ufff2\005\ufff2\006\ufff2\007\ufff2\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\016\002\005\003\012\004\011\005\003\006" +
    "\013\030\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\014\004\011\005\003\006\013" +
    "\030\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\142\030\143\001\001\000\002" +
    "\001\001\000\006\010\021\030\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\030\030\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\035\030\027\001\001\000\002\001\001\000\006\011\037" +
    "\030\027\001\001\000\002\001\001\000\006\011\041\030" +
    "\027\001\001\000\002\001\001\000\006\011\043\030\027" +
    "\001\001\000\002\001\001\000\004\012\045\001\001\000" +
    "\002\001\001\000\016\006\063\013\062\014\047\016\060" +
    "\025\054\030\053\001\001\000\016\006\063\013\201\014" +
    "\047\016\060\025\054\030\053\001\001\000\002\001\001" +
    "\000\014\021\164\024\076\025\070\027\166\030\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\022\127\024\076\025" +
    "\070\027\130\030\126\001\001\000\010\024\076\025\070" +
    "\027\100\001\001\000\010\024\076\025\070\027\125\001" +
    "\001\000\002\001\001\000\010\024\076\025\070\027\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\076\025\070\027\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\076\025\070\027\121\001\001\000\010" +
    "\024\076\025\070\027\120\001\001\000\010\024\076\025" +
    "\070\027\117\001\001\000\010\024\076\025\070\027\116" +
    "\001\001\000\010\024\076\025\070\027\115\001\001\000" +
    "\010\024\076\025\070\027\114\001\001\000\010\024\076" +
    "\025\070\027\113\001\001\000\010\024\076\025\070\027" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\132\030\133" +
    "\001\001\000\010\024\076\025\070\027\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\135\030\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\142\030\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\145\030" +
    "\143\001\001\000\002\001\001\000\006\007\147\030\143" +
    "\001\001\000\002\001\001\000\006\007\151\030\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\024\076" +
    "\025\070\027\154\001\001\000\002\001\001\000\004\020" +
    "\157\001\001\000\010\015\161\016\160\025\054\001\001" +
    "\000\002\001\001\000\010\015\163\016\160\025\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\024\076\025\070\027\171\001\001" +
    "\000\002\001\001\000\012\016\174\020\175\025\054\026" +
    "\173\001\001\000\004\017\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\174\020" +
    "\175\025\054\026\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\203\030\027\001\001\000\002\001" +
    "\001\000\006\010\205\030\024\001\001\000\002\001\001" +
    "\000\004\012\207\001\001\000\002\001\001\000\006\007" +
    "\147\030\143\001\001\000\002\001\001\000\006\010\213" +
    "\030\024\001\001\000\002\001\001\000\004\012\215\001" +
    "\001\000\002\001\001\000\006\010\217\030\024\001\001" +
    "\000\002\001\001\000\004\012\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\151\030\143\001\001" +
    "\000\006\010\225\030\024\001\001\000\002\001\001\000" +
    "\004\012\227\001\001\000\002\001\001\000\006\010\231" +
    "\030\024\001\001\000\002\001\001\000\004\012\233\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}


        
        
    

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions  {
  public final Sintax parser ;
        String cola =  "";
        String arbol = "ARBOL SINTACTICO" ;
        String rito = "a";
        
  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }
  public String vArbol(){return arbol;}

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;
      
  
      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol +=   "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= TERMINO OpOr EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol += "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= TERMINO OpAnd EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol +=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= TERMINO Igual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol += "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= TERMINO Op_relacional EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol += "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= TERMINO Division EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol +=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= TERMINO Resta EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol +=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= TERMINO Suma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= TERMINO Multiplicacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= OpNot EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= Suma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= Parentesis_a EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIABLOQUE ::= BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABLOQUE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIABLOQUE ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABLOQUE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LLAMADAFUNC ::= Identificador Parentesis_a ARGUMENTOS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNC",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TERMINO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
             
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TERMINO ::= Char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TERMINO ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TERMINO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TERMINO ::= LLAMADAFUNC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTAARGUMENTOS ::= Coma EXPRESION LISTAARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAARGUMENTOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTAARGUMENTOS ::= VACIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAARGUMENTOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ARGUMENTOS ::= EXPRESION LISTAARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARGUMENTOS ::= VACIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALORREGRESA ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORREGRESA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALORREGRESA ::= VACIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORREGRESA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BLOQUE ::= Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OTRO ::= Else SENTENCIABLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OTRO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= LLAMADAFUNC P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= Return VALORREGRESA P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= While Parentesis_a EXPRESION Parentesis_c BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= If Parentesis_a EXPRESION Parentesis_c SENTENCIABLOQUE OTRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= Identificador Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+="\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIAS ::= SENTENCIA SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DEFLOCAL ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFLOCAL",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DEFLOCAL ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFLOCAL",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEFLOCALES ::= DEFLOCAL DEFLOCALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFLOCALES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEFLOCALES ::= VACIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFLOCALES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BLOQFUN ::= Llave_a DEFLOCALES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQFUN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTAPARAM ::= Coma Char Identificador LISTAPARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTAPARAM ::= Coma Int Identificador LISTAPARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTAPARAM ::= Coma T_dato Identificador LISTAPARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("  estado"+CUP$Sintax$result+"     caso     "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTAPARAM ::= VACIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("  estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETROS ::= Char Identificador LISTAPARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("  estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMETROS ::= Int Identificador LISTAPARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETROS ::= T_dato Identificador LISTAPARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETROS ::= VACIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DEFFUNC ::= Char Main Parentesis_a PARAMETROS Parentesis_c BLOQFUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFFUNC",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DEFFUNC ::= Char Identificador Parentesis_a PARAMETROS Parentesis_c BLOQFUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFFUNC",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+="\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DEFFUNC ::= Int Main Parentesis_a PARAMETROS Parentesis_c BLOQFUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFFUNC",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DEFFUNC ::= T_dato Main Parentesis_a PARAMETROS Parentesis_c BLOQFUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFFUNC",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEFFUNC ::= Int Identificador Parentesis_a PARAMETROS Parentesis_c BLOQFUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFFUNC",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFFUNC ::= T_dato Identificador Parentesis_a PARAMETROS Parentesis_c BLOQFUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFFUNC",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTAVAR ::= P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAVAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTAVAR ::= Coma Identificador LISTAVAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAVAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTAVAR ::= VACIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAVAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEFVAR ::= Char Identificador LISTAVAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFVAR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEFVAR ::= Int Identificador LISTAVAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFVAR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
             
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEFVAR ::= T_dato Identificador LISTAVAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFVAR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
             
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEFINICION ::= DEFFUNC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFINICION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado  "+CUP$Sintax$result+"     caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEFINICION ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFINICION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEFINICIONES ::= DEFINICION DEFINICIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFINICIONES",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+= "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DEFINICIONES ::= VACIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFINICIONES",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
              
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= DEFINICIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
                
              System.out.println("estado    "+CUP$Sintax$result+"   caso    "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
             
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // VACIO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VACIO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
             
              System.out.println("estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack);
              arbol+=  "\n" + "estado    "+CUP$Sintax$result+"   caso   "+CUP$Sintax$stack;
              
          }   
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
                
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
                System.out.println("Inicio  "+CUP$Sintax$result+" caso   "+CUP$Sintax$stack);
                arbol+="\n" + "Inicio  "+CUP$Sintax$result+" caso   "+CUP$Sintax$stack;
          }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          System.out.println("Final");
          System.out.println(arbol);
          System.out.println("este es el final"+CUP$Sintax$result);
          try{
            File myObj = new File("arbol.txt");
            if(myObj.createNewFile()){
                System.out.println("File created");
            }else{
                System.out.println("File already exist");
            } 
        }catch (Exception e){
                    System.out.println("An error ocurred");
                    e.printStackTrace();
                    }
          try{
              FileWriter myWriter = new FileWriter("arbol.txt");
              myWriter.write(arbol);
              myWriter.close();
          }catch (Exception e){
                    System.out.println("An error ocurred");
                    e.printStackTrace();
                    }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");
              

        }
    }
}

